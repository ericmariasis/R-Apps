# Dataset:
#  https://www.kaggle.com/marlonferrari/elearning-student-reactions
library(ggplot2)
library(dplyr)
library(corrplot)
library(pROC)
library(ROCR)
library(Metrics)
library(popbio)
df = read.csv("online_classroom_data.csv")
# Clean
df$sk1_classroom =
as.numeric(sub(",", ".", df$sk1_classroom, fixed = TRUE))
df$sk2_classroom =
as.numeric(sub(",", ".", df$sk2_classroom, fixed = TRUE))
df$sk3_classroom =
as.numeric(sub(",", ".", df$sk3_classroom, fixed = TRUE))
df$sk4_classroom =
as.numeric(sub(",", ".", df$sk4_classroom, fixed = TRUE))
df$sk5_classroom =
as.numeric(sub(",", ".", df$sk5_classroom, fixed = TRUE))
df$Approved = factor(df$Approved, levels = c(0,1))
str(df)
## Explore
# boxplot broken down by approval
ggplot(df, aes(x = Approved, y = total_posts)) +
geom_boxplot() +
scale_y_continuous(trans="log10")
# median and IQR of approvals
df %>%
group_by(Approved) %>%
summarize(median(total_posts), IQR(total_posts))
ggplot(df, aes(x = Approved, fill = Approved)) +
geom_bar() +
ggtitle("Count of students by approval type")
# params (10,15,20,25,30 for bins)
ggplot(df, aes(x = nice_code_post, fill = Approved)) +
geom_histogram(bins = 25) +
facet_wrap(~ Approved) +
scale_x_continuous(trans="log10")
ggtitle("Count broken down by approval")
ggplot(df, aes(x = nice_code_post, fill = Approved)) +
geom_density(alpha = 0.3) +
scale_x_continuous(trans="log10")
ggtitle("Density broken down by approval")
correlations = cor(df[,11:15])
corrplot(correlations, method = "circle")
# train and test set
set.seed(124)
sample_size = floor(0.85 * nrow(df))
train_ind = sample(seq_len(nrow(df)), size = sample_size)
train = df[train_ind, ]
test = df[-train_ind, ]
glmModel = glm(Approved ~ sk3_classroom,
data = train,
family = "binomial",
control = list(maxit=200))
summary(glmModel)
# confidence interval summary
confint(glmModel)
anova(glmModel, test = 'Chisq')
test$modPredict = predict(glmModel,
newdata = test,
type = "response")
head(test)
test$modPredict = ifelse(test$modPredict > 0.5, 1, 0)
mean(test$modPredict == test$Approved)
# Dataset:
#  https://www.kaggle.com/marlonferrari/elearning-student-reactions
library(ggplot2)
library(dplyr)
library(corrplot)
library(pROC)
library(ROCR)
library(Metrics)
library(popbio)
df = read.csv("online_classroom_data.csv")
# Clean
df$sk1_classroom =
as.numeric(sub(",", ".", df$sk1_classroom, fixed = TRUE))
df$sk2_classroom =
as.numeric(sub(",", ".", df$sk2_classroom, fixed = TRUE))
df$sk3_classroom =
as.numeric(sub(",", ".", df$sk3_classroom, fixed = TRUE))
df$sk4_classroom =
as.numeric(sub(",", ".", df$sk4_classroom, fixed = TRUE))
df$sk5_classroom =
as.numeric(sub(",", ".", df$sk5_classroom, fixed = TRUE))
df$Approved = factor(df$Approved, levels = c(0,1))
str(df)
## Explore
# boxplot broken down by approval
ggplot(df, aes(x = Approved, y = total_posts)) +
geom_boxplot() +
scale_y_continuous(trans="log10")
# median and IQR of approvals
df %>%
group_by(Approved) %>%
summarize(median(total_posts), IQR(total_posts))
ggplot(df, aes(x = Approved, fill = Approved)) +
geom_bar() +
ggtitle("Count of students by approval type")
# params (10,15,20,25,30 for bins)
ggplot(df, aes(x = nice_code_post, fill = Approved)) +
geom_histogram(bins = 25) +
facet_wrap(~ Approved) +
scale_x_continuous(trans="log10")
ggtitle("Count broken down by approval")
ggplot(df, aes(x = nice_code_post, fill = Approved)) +
geom_density(alpha = 0.3) +
scale_x_continuous(trans="log10")
ggtitle("Density broken down by approval")
correlations = cor(df[,11:15])
corrplot(correlations, method = "circle")
# train and test set
set.seed(124)
sample_size = floor(0.85 * nrow(df))
train_ind = sample(seq_len(nrow(df)), size = sample_size)
train = df[train_ind, ]
test = df[-train_ind, ]
popbio::logi.hist.plot(train$sk1_classroom, train$Approved, boxp=FALSE,type="hist",col="gray")
?logi.hist.plot
plot(train$sk1_classroom, train$Approved, xlab="sk1_classroom", ylab="P(Approved)")
trainLR = glm(Approved ~ sk1_classroom, data=train, family=binomial(link="logit"), control = list(maxit=200))
curve(predict(trainLR,data.frame(sk1_classroom=x),type="resp"),add=TRUE)
points(train$Approved,fitted(trainLR),pch=20)
train
plot(train$sk1_classroom, train$Approved, xlab="sk1_classroom", ylab="P(Approved)")
trainLR = glm(Approved ~ sk1_classroom, data=train, family=binomial(link="logit"), control = list(maxit=200))
trainLR
summary(trainLR)
plot(train$sk1_classroom, train$Approved, xlab="sk1_classroom", ylab="P(Approved)")
trainLR = glm(Approved ~ sk1_classroom, data=train, family=binomial(link="logit"), control = list(maxit=200))
curve(predict(trainLR,data.frame(sk1_classroom=x),type="resp"),add=TRUE)
points(train$Approved,fitted(trainLR),pch=20)
colnames(test)
test$X
colnames(test[,2:15])
pred = predict(glmModel, test[,2:15], type = "response")
pObject = ROCR::prediction(pred, test$Approved )
rocObj = ROCR::performance(pObject, measure="tpr", x.measure="fpr")
aucObj = ROCR::performance(pObject, measure="auc")
plot(rocObj, main = paste("Area under the curve:", round(aucObj@y.values[[1]] ,4)))
# Dataset:
#  https://www.kaggle.com/marlonferrari/elearning-student-reactions
library(ggplot2)
library(dplyr)
library(corrplot)
library(pROC)
library(ROCR)
library(Metrics)
library(popbio)
df = read.csv("online_classroom_data.csv")
# Clean
df$sk1_classroom =
as.numeric(sub(",", ".", df$sk1_classroom, fixed = TRUE))
df$sk2_classroom =
as.numeric(sub(",", ".", df$sk2_classroom, fixed = TRUE))
df$sk3_classroom =
as.numeric(sub(",", ".", df$sk3_classroom, fixed = TRUE))
df$sk4_classroom =
as.numeric(sub(",", ".", df$sk4_classroom, fixed = TRUE))
df$sk5_classroom =
as.numeric(sub(",", ".", df$sk5_classroom, fixed = TRUE))
df$Approved = factor(df$Approved, levels = c(0,1))
str(df)
## Explore
# boxplot broken down by approval
ggplot(df, aes(x = Approved, y = total_posts)) +
geom_boxplot() +
scale_y_continuous(trans="log10")
# median and IQR of approvals
df %>%
group_by(Approved) %>%
summarize(median(total_posts), IQR(total_posts))
ggplot(df, aes(x = Approved, fill = Approved)) +
geom_bar() +
ggtitle("Count of students by approval type")
# params (10,15,20,25,30 for bins)
ggplot(df, aes(x = nice_code_post, fill = Approved)) +
geom_histogram(bins = 25) +
facet_wrap(~ Approved) +
scale_x_continuous(trans="log10")
ggtitle("Count broken down by approval")
ggplot(df, aes(x = nice_code_post, fill = Approved)) +
geom_density(alpha = 0.3) +
scale_x_continuous(trans="log10")
ggtitle("Density broken down by approval")
correlations = cor(df[,11:15])
corrplot(correlations, method = "circle")
# train and test set
set.seed(124)
sample_size = floor(0.85 * nrow(df))
train_ind = sample(seq_len(nrow(df)), size = sample_size)
train = df[train_ind, ]
test = df[-train_ind, ]
glmModel = glm(Approved ~ sk3_classroom,
data = train,
family = "binomial",
control = list(maxit=200))
summary(glmModel)
# confidence interval summary
confint(glmModel)
anova(glmModel, test = 'Chisq')
test$modPredict = predict(glmModel,
newdata = test,
type = "response")
head(test)
test$origModPredict = test$modPredict
test$modPredict = ifelse(test$modPredict > 0.5, 1, 0)
mean(test$modPredict == test$Approved)
# Visualize
plot(train$sk1_classroom, train$Approved, xlab="sk1_classroom", ylab="P(Approved)")
trainLR = glm(Approved ~ sk1_classroom, data=train, family=binomial(link="logit"), control = list(maxit=200))
curve(predict(trainLR,data.frame(sk1_classroom=x),type="resp"),add=TRUE)
points(train$Approved,fitted(trainLR),pch=20)
# plot ROC
pred = predict(glmModel, test[,2:15], type = "response")
pObject = ROCR::prediction(pred, test$Approved )
rocObj = ROCR::performance(pObject, measure="tpr", x.measure="fpr")
aucObj = ROCR::performance(pObject, measure="auc")
plot(rocObj, main = paste("Area under the curve:", round(aucObj@y.values[[1]] ,4)))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Elearning_logistic_regression')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Dataset:
#  https://www.kaggle.com/marlonferrari/elearning-student-reactions
library(ggplot2)
library(dplyr)
library(corrplot)
library(pROC)
library(ROCR)
library(Metrics)
library(popbio)
df = read.csv("online_classroom_data.csv")
# Clean
df$sk1_classroom =
as.numeric(sub(",", ".", df$sk1_classroom, fixed = TRUE))
df$sk2_classroom =
as.numeric(sub(",", ".", df$sk2_classroom, fixed = TRUE))
df$sk3_classroom =
as.numeric(sub(",", ".", df$sk3_classroom, fixed = TRUE))
df$sk4_classroom =
as.numeric(sub(",", ".", df$sk4_classroom, fixed = TRUE))
df$sk5_classroom =
as.numeric(sub(",", ".", df$sk5_classroom, fixed = TRUE))
df$Approved = factor(df$Approved, levels = c(0,1))
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
df %>%
group_by(Approved) %>%
summarize(median(total_posts), IQR(total_posts))
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
?summary
runApp('Elearning_logistic_regression')
summary(df$total_posts)
df[,"total_posts"]
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
summary(df$nice_code_post)
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
correlations = cor(df[,11:15])
corrplot(correlations, method = "circle")
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
0.8*71
runApp('Elearning_logistic_regression')
runApp()
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
?code
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
summary(glmModel)
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
tags
tags$body()
tags$body
names(tags)
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
names(tags)
?tag
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
confint(glmModel)
anova(glmModel, test = 'Chisq')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression', display.mode = "showcase")
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
?verbatimTextOutput
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
plot(train$sk1_classroom, train$Approved, xlab="sk1_classroom", ylab="P(Approved)")
trainLR = glm(Approved ~ sk1_classroom, data=train, family=binomial(link="logit"), control = list(maxit=200))
curve(predict(trainLR,data.frame(sk1_classroom=x),type="resp"),add=TRUE)
points(train$Approved,fitted(trainLR),pch=20)
pred = predict(glmModel, test[,2:15], type = "response")
pObject = ROCR::prediction(pred, test$Approved )
rocObj = ROCR::performance(pObject, measure="tpr", x.measure="fpr")
aucObj = ROCR::performance(pObject, measure="auc")
plot(rocObj, main = paste("Area under the curve:", round(aucObj@y.values[[1]] ,4)))
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
runApp('Elearning_logistic_regression')
