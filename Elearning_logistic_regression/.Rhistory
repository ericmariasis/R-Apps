data
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Peak Gusts MPH", "Peak Gust M/S"), comment.char = "#", skip = 3, header=F)
dat
da# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), comment.char = "#", skip = 3, header=F)
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), comment.char = "#", skip = 2, header=F)
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), comment.char = "#", skip = 3, header=F)
dat
help(skip)
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), comment.char = "#", skip = 4, header=F)
dat
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), comment.char = "#", skip = 4, header=F)
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), comment.char = "#", skip = 4, header=F)
dat
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), skip = 4)
sep="\t", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), skip = 4)
dat
? read.delim
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep=":", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), skip = 4)
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep=":", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), skip = 4)
dat
# read input file from appropriate URL, values in mph
dat<-read.delim("http://www.itl.nist.gov/div898/winds/data/nondirectional/datasets/boston_ma.prn",
sep="", col.names=c("Direction", "Fastest Mile", "Peak Gusts MPH", "Peak Gust M/S"), skip = 4)
dat
str(dat)
dat$Fastest.Mile
install.packages("Rcmdr")
install.packages("curl")
install.packages("curl")
knitr::opts_chunk$set(error = TRUE)
```
# Your R code here
ul_tweet_words <- unlist(tweet_words)
knitr::opts_chunk$set(error = TRUE)
```
library(rtweet)
library(stringr)
## authenticate via web browser
#token <- create_token(
# app = "Twitter Analysis Case Study",
#consumer_key = consumerKey,
#consumer_secret = consumerSecret)
#tweets = search_tweets(q = '#nytimes', n=110)
#write_as_csv(tweets, "tweets_file.csv")
tweetsDF <- read.csv("tweets_file.csv")
# Your R code here
tweet_words <- str_split(str_trim(str_squish(tweetsDF$text)), " ")
tweet_words_anumeric <- unlist(tweet_words)
# strip all non-alphanumeric characters
tweet_words_anumeric <- str_replace_all(tweet_words_anumeric, "[^[:alnum:]]", " ")
tweetFreqs <- table(tweet_words_anumeric)
#  Your R code here
tweetFreqsSorted <- sort(tweetFreqs, decreasing = TRUE)
tweetFreqsFinal <- head(tweetFreqsSorted, 30)
tweetFreqsFinal <- as.data.frame(tweetFreqsFinal)
colnames(tweetFreqsFinal) <- c("Word","Count")
tweetFreqsFinal
# Your R code here
# Make sure each tweet is only counted once
tweetsDfUniqTweets <- tweetsDF[!duplicated(tweetsDF[,"text"]),]
# sort by retweet count
retweets <- head(sort(tweetsDfUniqTweets$retweet_count, decreasing = TRUE), 10)
retweets <- as.data.frame(retweets)
retweets
# Your R code here
ul_tweet_words <- unlist(tweet_words)
ul_hash_tags <- ul_tweet_words[startsWith(ul_tweet_words, "#")]
ul_user_ments <- ul_tweet_words[startsWith(ul_tweet_words, "@")]
top_hash_tags <- head(ul_hash_tags, 10)
top_user_ments <- head(ul_user_ments, 10)
tweet_entities <- cbind(top_hash_tags, top_user_ments)
tweet_entities
ul_hash_tags
# Your R code here
ul_tweet_words <- unlist(tweet_words)
ul_hash_tags <- ul_tweet_words[startsWith(ul_tweet_words, "#")]
ul_user_ments <- ul_tweet_words[startsWith(ul_tweet_words, "@")]
#top_hash_tags <- head(ul_hash_tags, 10)
#top_user_ments <- head(ul_user_ments, 10)
#tweet_entities <- cbind(top_hash_tags, top_user_ments)
#tweet_entities
#NEW
hash_tag_tbl <- table(ul_hash_tags)
user_ment_tbl <- table(ul_user_ments)
hash_tag_tbl <- sort(hash_tag_tbl, decreasing = TRUE)
user_ment_tbl <- sort(user_ment_tbl, decreasing = TRUE)
top_hash_tags <- as.data.frame(head(hash_tag_tbl, 10))
top_user_ments <- as.data.frame(head(user_ment_tbl, 10))
tweet_entities <- cbind(top_hash_tags, top_user_ments)
tweet_entities
# 20 friends section
friends_of_user <- get_friends("@rihanna")
friends_of_user_orig <- friends_of_user
# only care to compute on 20 friends
friends_of_user <- friends_of_user[1:20,]
# Get enough info about the users to get their screen names
friends_info <- lookup_users(friends_of_user$user_id)
# remove the user column because only the friend user ids and
# friend screen names matter
friends_of_user <- subset(friends_of_user, select = c(-user))
friends_of_user <-
cbind(friends_of_user, friends_info$screen_name)
colnames(friends_of_user) <- c("friend_id","friend_screen_name")
print(friends_of_user)
# 20 followers section
followers_of_user <- get_followers("@rihanna")
followers_of_user_orig <- followers_of_user
followers_of_user <- followers_of_user[1:20,]
followers_info <- lookup_users(followers_of_user$user_id)
followers_of_user <- cbind(followers_of_user, followers_info$screen_name)
colnames(followers_of_user) <- c("follower_id","follower_screen_name")
followers_of_user
# Mutual friends/followers section
followers_of_user
followers_of_user_orig
friends_of_user_orig
mutual_people <- intersect(followers_of_user_orig, friends_of_user_orig$user_id)
mutual_people
followers_of_user_orig
mutual_people <- intersect(followers_of_user_orig$user_id, friends_of_user_orig$user_id)
mutual_people
followers_of_user_orig$user_id
class(followers_of_user_orig$user_id)
followers_of_user_orig$user_id[[1]]
unlist(followers_of_user_orig$user_id)
class(unlist(followers_of_user_orig$user_id))
followers_of_user_orig$user_id[1]
?intersect
intersect(followers_of_user_orig$user_id, friends_of_user_orig$user_id)
myvec1 <- c("1234","4321","8888")
myvec2 <- c("4321","jkjlkjljlj")
intersect(myvec1,myvec2)
get_followers("@rihanna", retryonratelimit = TRUE)
?get_followers
get_followers("@rihanna", n = Inf, retryonratelimit = TRUE)
get_followers("@rihanna", n = 999999999, retryonratelimit = TRUE)
followers_of_user_orig
friends_of_user_orig
common_users <- intersect(followers_of_user_orig$user_id, friends_of_user_orig$user_id)
common_users
common_users <- intersect(followers_of_user_orig$user_id, friends_of_user_orig$user_id)
common_users_info <- lookup_users(common_users)
followers_of_user_orig$user_id
common_users <- friends_of_user_orig$user_id
common_users_info <- lookup_users(common_users)
common_users <-
cbind(common_users, common_users_info$screen_name)
colnames(common_users) <-
c("mutual_user_id","mutual_screenname")
common_users
consumerKey = "TRaZ3Y0jmm0CYGP02AtGeVuNy"
consumerSecret = "ycDxs9zccItJpPL7IL0LsDGdAL5V9PRhhPV5QbaAGaYL8oWdYB"
accessToken = "1170154128305197056-YZucu0uSCbk1K8F8ucG3X1ThJuPkDG"
accessTokenSecret = "Kctmsqbf2ObbNBkWS96fpflchDyUuo9hutMoBGf2Tcb1z"
library(rtweet)
library(stringr)
## authenticate via web browser
token <- create_token(
app = "Twitter Analysis Case Study",
consumer_key = consumerKey,
consumer_secret = consumerSecret)
tweets = search_tweets(q = '#nytimes', n=110)
write_as_csv(tweets, "tweets_file.csv")
tweetsDF <- read.csv("tweets_file.csv")
library(RCurl)
library(dplyr)
d1 = getURL("https://raw.githubusercontent.com/dnchari/DS501_MovieLens/master/Results/unifiedMLDataMulti.csv")
mlMultiData = read.csv(text=d1)
x = mlMultiData$rating > 4.5
x
shiny::runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
runApp('WPI/DS_501/HW6/Elearning_logistic_regression')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='eric-mariasis',
token='262B5E061494AB78E78E1E43B625C5F9',
secret='baKN7X7XGD49fmnrxIz0563Eeztalqij/nMcD4Kd')
runApp()
setwd("WPI/DS_501/HW6/Elearning_logistic_regression/")
runApp()
deployApp()
